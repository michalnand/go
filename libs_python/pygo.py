# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pygo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pygo')
    _pygo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pygo', [dirname(__file__)])
        except ImportError:
            import _pygo
            return _pygo
        try:
            _mod = imp.load_module('_pygo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pygo = swig_import_helper()
    del swig_import_helper
else:
    import _pygo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pygo.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pygo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pygo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pygo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pygo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pygo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pygo.SwigPyIterator_copy(self)

    def next(self):
        return _pygo.SwigPyIterator_next(self)

    def __next__(self):
        return _pygo.SwigPyIterator___next__(self)

    def previous(self):
        return _pygo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pygo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pygo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pygo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pygo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pygo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pygo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pygo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pygo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygo.VectorChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygo.VectorChar___nonzero__(self)

    def __bool__(self):
        return _pygo.VectorChar___bool__(self)

    def __len__(self):
        return _pygo.VectorChar___len__(self)

    def __getslice__(self, i, j):
        return _pygo.VectorChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygo.VectorChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygo.VectorChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygo.VectorChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygo.VectorChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygo.VectorChar___setitem__(self, *args)

    def pop(self):
        return _pygo.VectorChar_pop(self)

    def append(self, x):
        return _pygo.VectorChar_append(self, x)

    def empty(self):
        return _pygo.VectorChar_empty(self)

    def size(self):
        return _pygo.VectorChar_size(self)

    def swap(self, v):
        return _pygo.VectorChar_swap(self, v)

    def begin(self):
        return _pygo.VectorChar_begin(self)

    def end(self):
        return _pygo.VectorChar_end(self)

    def rbegin(self):
        return _pygo.VectorChar_rbegin(self)

    def rend(self):
        return _pygo.VectorChar_rend(self)

    def clear(self):
        return _pygo.VectorChar_clear(self)

    def get_allocator(self):
        return _pygo.VectorChar_get_allocator(self)

    def pop_back(self):
        return _pygo.VectorChar_pop_back(self)

    def erase(self, *args):
        return _pygo.VectorChar_erase(self, *args)

    def __init__(self, *args):
        this = _pygo.new_VectorChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pygo.VectorChar_push_back(self, x)

    def front(self):
        return _pygo.VectorChar_front(self)

    def back(self):
        return _pygo.VectorChar_back(self)

    def assign(self, n, x):
        return _pygo.VectorChar_assign(self, n, x)

    def resize(self, *args):
        return _pygo.VectorChar_resize(self, *args)

    def insert(self, *args):
        return _pygo.VectorChar_insert(self, *args)

    def reserve(self, n):
        return _pygo.VectorChar_reserve(self, n)

    def capacity(self):
        return _pygo.VectorChar_capacity(self)
    __swig_destroy__ = _pygo.delete_VectorChar
    __del__ = lambda self: None
VectorChar_swigregister = _pygo.VectorChar_swigregister
VectorChar_swigregister(VectorChar)

class VectorUnsignedChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygo.VectorUnsignedChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygo.VectorUnsignedChar___nonzero__(self)

    def __bool__(self):
        return _pygo.VectorUnsignedChar___bool__(self)

    def __len__(self):
        return _pygo.VectorUnsignedChar___len__(self)

    def __getslice__(self, i, j):
        return _pygo.VectorUnsignedChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygo.VectorUnsignedChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygo.VectorUnsignedChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygo.VectorUnsignedChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygo.VectorUnsignedChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygo.VectorUnsignedChar___setitem__(self, *args)

    def pop(self):
        return _pygo.VectorUnsignedChar_pop(self)

    def append(self, x):
        return _pygo.VectorUnsignedChar_append(self, x)

    def empty(self):
        return _pygo.VectorUnsignedChar_empty(self)

    def size(self):
        return _pygo.VectorUnsignedChar_size(self)

    def swap(self, v):
        return _pygo.VectorUnsignedChar_swap(self, v)

    def begin(self):
        return _pygo.VectorUnsignedChar_begin(self)

    def end(self):
        return _pygo.VectorUnsignedChar_end(self)

    def rbegin(self):
        return _pygo.VectorUnsignedChar_rbegin(self)

    def rend(self):
        return _pygo.VectorUnsignedChar_rend(self)

    def clear(self):
        return _pygo.VectorUnsignedChar_clear(self)

    def get_allocator(self):
        return _pygo.VectorUnsignedChar_get_allocator(self)

    def pop_back(self):
        return _pygo.VectorUnsignedChar_pop_back(self)

    def erase(self, *args):
        return _pygo.VectorUnsignedChar_erase(self, *args)

    def __init__(self, *args):
        this = _pygo.new_VectorUnsignedChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pygo.VectorUnsignedChar_push_back(self, x)

    def front(self):
        return _pygo.VectorUnsignedChar_front(self)

    def back(self):
        return _pygo.VectorUnsignedChar_back(self)

    def assign(self, n, x):
        return _pygo.VectorUnsignedChar_assign(self, n, x)

    def resize(self, *args):
        return _pygo.VectorUnsignedChar_resize(self, *args)

    def insert(self, *args):
        return _pygo.VectorUnsignedChar_insert(self, *args)

    def reserve(self, n):
        return _pygo.VectorUnsignedChar_reserve(self, n)

    def capacity(self):
        return _pygo.VectorUnsignedChar_capacity(self)
    __swig_destroy__ = _pygo.delete_VectorUnsignedChar
    __del__ = lambda self: None
VectorUnsignedChar_swigregister = _pygo.VectorUnsignedChar_swigregister
VectorUnsignedChar_swigregister(VectorUnsignedChar)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygo.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygo.VectorInt___nonzero__(self)

    def __bool__(self):
        return _pygo.VectorInt___bool__(self)

    def __len__(self):
        return _pygo.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _pygo.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygo.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygo.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygo.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygo.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygo.VectorInt___setitem__(self, *args)

    def pop(self):
        return _pygo.VectorInt_pop(self)

    def append(self, x):
        return _pygo.VectorInt_append(self, x)

    def empty(self):
        return _pygo.VectorInt_empty(self)

    def size(self):
        return _pygo.VectorInt_size(self)

    def swap(self, v):
        return _pygo.VectorInt_swap(self, v)

    def begin(self):
        return _pygo.VectorInt_begin(self)

    def end(self):
        return _pygo.VectorInt_end(self)

    def rbegin(self):
        return _pygo.VectorInt_rbegin(self)

    def rend(self):
        return _pygo.VectorInt_rend(self)

    def clear(self):
        return _pygo.VectorInt_clear(self)

    def get_allocator(self):
        return _pygo.VectorInt_get_allocator(self)

    def pop_back(self):
        return _pygo.VectorInt_pop_back(self)

    def erase(self, *args):
        return _pygo.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _pygo.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pygo.VectorInt_push_back(self, x)

    def front(self):
        return _pygo.VectorInt_front(self)

    def back(self):
        return _pygo.VectorInt_back(self)

    def assign(self, n, x):
        return _pygo.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _pygo.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _pygo.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _pygo.VectorInt_reserve(self, n)

    def capacity(self):
        return _pygo.VectorInt_capacity(self)
    __swig_destroy__ = _pygo.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _pygo.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygo.VectorUnsignedInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygo.VectorUnsignedInt___nonzero__(self)

    def __bool__(self):
        return _pygo.VectorUnsignedInt___bool__(self)

    def __len__(self):
        return _pygo.VectorUnsignedInt___len__(self)

    def __getslice__(self, i, j):
        return _pygo.VectorUnsignedInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygo.VectorUnsignedInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygo.VectorUnsignedInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygo.VectorUnsignedInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygo.VectorUnsignedInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygo.VectorUnsignedInt___setitem__(self, *args)

    def pop(self):
        return _pygo.VectorUnsignedInt_pop(self)

    def append(self, x):
        return _pygo.VectorUnsignedInt_append(self, x)

    def empty(self):
        return _pygo.VectorUnsignedInt_empty(self)

    def size(self):
        return _pygo.VectorUnsignedInt_size(self)

    def swap(self, v):
        return _pygo.VectorUnsignedInt_swap(self, v)

    def begin(self):
        return _pygo.VectorUnsignedInt_begin(self)

    def end(self):
        return _pygo.VectorUnsignedInt_end(self)

    def rbegin(self):
        return _pygo.VectorUnsignedInt_rbegin(self)

    def rend(self):
        return _pygo.VectorUnsignedInt_rend(self)

    def clear(self):
        return _pygo.VectorUnsignedInt_clear(self)

    def get_allocator(self):
        return _pygo.VectorUnsignedInt_get_allocator(self)

    def pop_back(self):
        return _pygo.VectorUnsignedInt_pop_back(self)

    def erase(self, *args):
        return _pygo.VectorUnsignedInt_erase(self, *args)

    def __init__(self, *args):
        this = _pygo.new_VectorUnsignedInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pygo.VectorUnsignedInt_push_back(self, x)

    def front(self):
        return _pygo.VectorUnsignedInt_front(self)

    def back(self):
        return _pygo.VectorUnsignedInt_back(self)

    def assign(self, n, x):
        return _pygo.VectorUnsignedInt_assign(self, n, x)

    def resize(self, *args):
        return _pygo.VectorUnsignedInt_resize(self, *args)

    def insert(self, *args):
        return _pygo.VectorUnsignedInt_insert(self, *args)

    def reserve(self, n):
        return _pygo.VectorUnsignedInt_reserve(self, n)

    def capacity(self):
        return _pygo.VectorUnsignedInt_capacity(self)
    __swig_destroy__ = _pygo.delete_VectorUnsignedInt
    __del__ = lambda self: None
VectorUnsignedInt_swigregister = _pygo.VectorUnsignedInt_swigregister
VectorUnsignedInt_swigregister(VectorUnsignedInt)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygo.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygo.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _pygo.VectorFloat___bool__(self)

    def __len__(self):
        return _pygo.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _pygo.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygo.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygo.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygo.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygo.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygo.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _pygo.VectorFloat_pop(self)

    def append(self, x):
        return _pygo.VectorFloat_append(self, x)

    def empty(self):
        return _pygo.VectorFloat_empty(self)

    def size(self):
        return _pygo.VectorFloat_size(self)

    def swap(self, v):
        return _pygo.VectorFloat_swap(self, v)

    def begin(self):
        return _pygo.VectorFloat_begin(self)

    def end(self):
        return _pygo.VectorFloat_end(self)

    def rbegin(self):
        return _pygo.VectorFloat_rbegin(self)

    def rend(self):
        return _pygo.VectorFloat_rend(self)

    def clear(self):
        return _pygo.VectorFloat_clear(self)

    def get_allocator(self):
        return _pygo.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _pygo.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _pygo.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _pygo.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pygo.VectorFloat_push_back(self, x)

    def front(self):
        return _pygo.VectorFloat_front(self)

    def back(self):
        return _pygo.VectorFloat_back(self)

    def assign(self, n, x):
        return _pygo.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _pygo.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _pygo.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _pygo.VectorFloat_reserve(self, n)

    def capacity(self):
        return _pygo.VectorFloat_capacity(self)
    __swig_destroy__ = _pygo.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _pygo.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygo.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygo.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _pygo.VectorDouble___bool__(self)

    def __len__(self):
        return _pygo.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _pygo.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygo.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygo.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygo.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygo.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygo.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _pygo.VectorDouble_pop(self)

    def append(self, x):
        return _pygo.VectorDouble_append(self, x)

    def empty(self):
        return _pygo.VectorDouble_empty(self)

    def size(self):
        return _pygo.VectorDouble_size(self)

    def swap(self, v):
        return _pygo.VectorDouble_swap(self, v)

    def begin(self):
        return _pygo.VectorDouble_begin(self)

    def end(self):
        return _pygo.VectorDouble_end(self)

    def rbegin(self):
        return _pygo.VectorDouble_rbegin(self)

    def rend(self):
        return _pygo.VectorDouble_rend(self)

    def clear(self):
        return _pygo.VectorDouble_clear(self)

    def get_allocator(self):
        return _pygo.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _pygo.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _pygo.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _pygo.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pygo.VectorDouble_push_back(self, x)

    def front(self):
        return _pygo.VectorDouble_front(self)

    def back(self):
        return _pygo.VectorDouble_back(self)

    def assign(self, n, x):
        return _pygo.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _pygo.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _pygo.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _pygo.VectorDouble_reserve(self, n)

    def capacity(self):
        return _pygo.VectorDouble_capacity(self)
    __swig_destroy__ = _pygo.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _pygo.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class MatrixInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygo.MatrixInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygo.MatrixInt___nonzero__(self)

    def __bool__(self):
        return _pygo.MatrixInt___bool__(self)

    def __len__(self):
        return _pygo.MatrixInt___len__(self)

    def __getslice__(self, i, j):
        return _pygo.MatrixInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygo.MatrixInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygo.MatrixInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygo.MatrixInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygo.MatrixInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygo.MatrixInt___setitem__(self, *args)

    def pop(self):
        return _pygo.MatrixInt_pop(self)

    def append(self, x):
        return _pygo.MatrixInt_append(self, x)

    def empty(self):
        return _pygo.MatrixInt_empty(self)

    def size(self):
        return _pygo.MatrixInt_size(self)

    def swap(self, v):
        return _pygo.MatrixInt_swap(self, v)

    def begin(self):
        return _pygo.MatrixInt_begin(self)

    def end(self):
        return _pygo.MatrixInt_end(self)

    def rbegin(self):
        return _pygo.MatrixInt_rbegin(self)

    def rend(self):
        return _pygo.MatrixInt_rend(self)

    def clear(self):
        return _pygo.MatrixInt_clear(self)

    def get_allocator(self):
        return _pygo.MatrixInt_get_allocator(self)

    def pop_back(self):
        return _pygo.MatrixInt_pop_back(self)

    def erase(self, *args):
        return _pygo.MatrixInt_erase(self, *args)

    def __init__(self, *args):
        this = _pygo.new_MatrixInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pygo.MatrixInt_push_back(self, x)

    def front(self):
        return _pygo.MatrixInt_front(self)

    def back(self):
        return _pygo.MatrixInt_back(self)

    def assign(self, n, x):
        return _pygo.MatrixInt_assign(self, n, x)

    def resize(self, *args):
        return _pygo.MatrixInt_resize(self, *args)

    def insert(self, *args):
        return _pygo.MatrixInt_insert(self, *args)

    def reserve(self, n):
        return _pygo.MatrixInt_reserve(self, n)

    def capacity(self):
        return _pygo.MatrixInt_capacity(self)
    __swig_destroy__ = _pygo.delete_MatrixInt
    __del__ = lambda self: None
MatrixInt_swigregister = _pygo.MatrixInt_swigregister
MatrixInt_swigregister(MatrixInt)

class MatrixUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixUnsignedInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygo.MatrixUnsignedInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygo.MatrixUnsignedInt___nonzero__(self)

    def __bool__(self):
        return _pygo.MatrixUnsignedInt___bool__(self)

    def __len__(self):
        return _pygo.MatrixUnsignedInt___len__(self)

    def __getslice__(self, i, j):
        return _pygo.MatrixUnsignedInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygo.MatrixUnsignedInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygo.MatrixUnsignedInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygo.MatrixUnsignedInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygo.MatrixUnsignedInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygo.MatrixUnsignedInt___setitem__(self, *args)

    def pop(self):
        return _pygo.MatrixUnsignedInt_pop(self)

    def append(self, x):
        return _pygo.MatrixUnsignedInt_append(self, x)

    def empty(self):
        return _pygo.MatrixUnsignedInt_empty(self)

    def size(self):
        return _pygo.MatrixUnsignedInt_size(self)

    def swap(self, v):
        return _pygo.MatrixUnsignedInt_swap(self, v)

    def begin(self):
        return _pygo.MatrixUnsignedInt_begin(self)

    def end(self):
        return _pygo.MatrixUnsignedInt_end(self)

    def rbegin(self):
        return _pygo.MatrixUnsignedInt_rbegin(self)

    def rend(self):
        return _pygo.MatrixUnsignedInt_rend(self)

    def clear(self):
        return _pygo.MatrixUnsignedInt_clear(self)

    def get_allocator(self):
        return _pygo.MatrixUnsignedInt_get_allocator(self)

    def pop_back(self):
        return _pygo.MatrixUnsignedInt_pop_back(self)

    def erase(self, *args):
        return _pygo.MatrixUnsignedInt_erase(self, *args)

    def __init__(self, *args):
        this = _pygo.new_MatrixUnsignedInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pygo.MatrixUnsignedInt_push_back(self, x)

    def front(self):
        return _pygo.MatrixUnsignedInt_front(self)

    def back(self):
        return _pygo.MatrixUnsignedInt_back(self)

    def assign(self, n, x):
        return _pygo.MatrixUnsignedInt_assign(self, n, x)

    def resize(self, *args):
        return _pygo.MatrixUnsignedInt_resize(self, *args)

    def insert(self, *args):
        return _pygo.MatrixUnsignedInt_insert(self, *args)

    def reserve(self, n):
        return _pygo.MatrixUnsignedInt_reserve(self, n)

    def capacity(self):
        return _pygo.MatrixUnsignedInt_capacity(self)
    __swig_destroy__ = _pygo.delete_MatrixUnsignedInt
    __del__ = lambda self: None
MatrixUnsignedInt_swigregister = _pygo.MatrixUnsignedInt_swigregister
MatrixUnsignedInt_swigregister(MatrixUnsignedInt)

class MatrixFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygo.MatrixFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygo.MatrixFloat___nonzero__(self)

    def __bool__(self):
        return _pygo.MatrixFloat___bool__(self)

    def __len__(self):
        return _pygo.MatrixFloat___len__(self)

    def __getslice__(self, i, j):
        return _pygo.MatrixFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygo.MatrixFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygo.MatrixFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygo.MatrixFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygo.MatrixFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygo.MatrixFloat___setitem__(self, *args)

    def pop(self):
        return _pygo.MatrixFloat_pop(self)

    def append(self, x):
        return _pygo.MatrixFloat_append(self, x)

    def empty(self):
        return _pygo.MatrixFloat_empty(self)

    def size(self):
        return _pygo.MatrixFloat_size(self)

    def swap(self, v):
        return _pygo.MatrixFloat_swap(self, v)

    def begin(self):
        return _pygo.MatrixFloat_begin(self)

    def end(self):
        return _pygo.MatrixFloat_end(self)

    def rbegin(self):
        return _pygo.MatrixFloat_rbegin(self)

    def rend(self):
        return _pygo.MatrixFloat_rend(self)

    def clear(self):
        return _pygo.MatrixFloat_clear(self)

    def get_allocator(self):
        return _pygo.MatrixFloat_get_allocator(self)

    def pop_back(self):
        return _pygo.MatrixFloat_pop_back(self)

    def erase(self, *args):
        return _pygo.MatrixFloat_erase(self, *args)

    def __init__(self, *args):
        this = _pygo.new_MatrixFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pygo.MatrixFloat_push_back(self, x)

    def front(self):
        return _pygo.MatrixFloat_front(self)

    def back(self):
        return _pygo.MatrixFloat_back(self)

    def assign(self, n, x):
        return _pygo.MatrixFloat_assign(self, n, x)

    def resize(self, *args):
        return _pygo.MatrixFloat_resize(self, *args)

    def insert(self, *args):
        return _pygo.MatrixFloat_insert(self, *args)

    def reserve(self, n):
        return _pygo.MatrixFloat_reserve(self, n)

    def capacity(self):
        return _pygo.MatrixFloat_capacity(self)
    __swig_destroy__ = _pygo.delete_MatrixFloat
    __del__ = lambda self: None
MatrixFloat_swigregister = _pygo.MatrixFloat_swigregister
MatrixFloat_swigregister(MatrixFloat)

class MatrixDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygo.MatrixDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygo.MatrixDouble___nonzero__(self)

    def __bool__(self):
        return _pygo.MatrixDouble___bool__(self)

    def __len__(self):
        return _pygo.MatrixDouble___len__(self)

    def __getslice__(self, i, j):
        return _pygo.MatrixDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygo.MatrixDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygo.MatrixDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygo.MatrixDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygo.MatrixDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygo.MatrixDouble___setitem__(self, *args)

    def pop(self):
        return _pygo.MatrixDouble_pop(self)

    def append(self, x):
        return _pygo.MatrixDouble_append(self, x)

    def empty(self):
        return _pygo.MatrixDouble_empty(self)

    def size(self):
        return _pygo.MatrixDouble_size(self)

    def swap(self, v):
        return _pygo.MatrixDouble_swap(self, v)

    def begin(self):
        return _pygo.MatrixDouble_begin(self)

    def end(self):
        return _pygo.MatrixDouble_end(self)

    def rbegin(self):
        return _pygo.MatrixDouble_rbegin(self)

    def rend(self):
        return _pygo.MatrixDouble_rend(self)

    def clear(self):
        return _pygo.MatrixDouble_clear(self)

    def get_allocator(self):
        return _pygo.MatrixDouble_get_allocator(self)

    def pop_back(self):
        return _pygo.MatrixDouble_pop_back(self)

    def erase(self, *args):
        return _pygo.MatrixDouble_erase(self, *args)

    def __init__(self, *args):
        this = _pygo.new_MatrixDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pygo.MatrixDouble_push_back(self, x)

    def front(self):
        return _pygo.MatrixDouble_front(self)

    def back(self):
        return _pygo.MatrixDouble_back(self)

    def assign(self, n, x):
        return _pygo.MatrixDouble_assign(self, n, x)

    def resize(self, *args):
        return _pygo.MatrixDouble_resize(self, *args)

    def insert(self, *args):
        return _pygo.MatrixDouble_insert(self, *args)

    def reserve(self, n):
        return _pygo.MatrixDouble_reserve(self, n)

    def capacity(self):
        return _pygo.MatrixDouble_capacity(self)
    __swig_destroy__ = _pygo.delete_MatrixDouble
    __del__ = lambda self: None
MatrixDouble_swigregister = _pygo.MatrixDouble_swigregister
MatrixDouble_swigregister(MatrixDouble)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_Log(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_Log
    __del__ = lambda self: None

    def set_output_file_name(self, file_name):
        return _pygo.Log_set_output_file_name(self, file_name)

    def put_string(self, str):
        return _pygo.Log_put_string(self, str)

    def __lshift__(self, *args):
        return _pygo.Log___lshift__(self, *args)
Log_swigregister = _pygo.Log_swigregister
Log_swigregister(Log)

class sDatasetItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sDatasetItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sDatasetItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input"] = _pygo.sDatasetItem_input_set
    __swig_getmethods__["input"] = _pygo.sDatasetItem_input_get
    if _newclass:
        input = _swig_property(_pygo.sDatasetItem_input_get, _pygo.sDatasetItem_input_set)
    __swig_setmethods__["output"] = _pygo.sDatasetItem_output_set
    __swig_getmethods__["output"] = _pygo.sDatasetItem_output_get
    if _newclass:
        output = _swig_property(_pygo.sDatasetItem_output_get, _pygo.sDatasetItem_output_set)

    def __init__(self):
        this = _pygo.new_sDatasetItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_sDatasetItem
    __del__ = lambda self: None
sDatasetItem_swigregister = _pygo.sDatasetItem_swigregister
sDatasetItem_swigregister(sDatasetItem)

class DatasetInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetInterface, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygo.new_DatasetInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DatasetInterface
    __del__ = lambda self: None

    def _print(self):
        return _pygo.DatasetInterface__print(self)

    def get_random_training(self):
        return _pygo.DatasetInterface_get_random_training(self)

    def get_training(self, class_idx, idx):
        return _pygo.DatasetInterface_get_training(self, class_idx, idx)

    def get_class_items_count(self, class_idx):
        return _pygo.DatasetInterface_get_class_items_count(self, class_idx)

    def get_testing(self, idx):
        return _pygo.DatasetInterface_get_testing(self, idx)

    def get_random_testing(self):
        return _pygo.DatasetInterface_get_random_testing(self)

    def get_unlabeled(self, idx):
        return _pygo.DatasetInterface_get_unlabeled(self, idx)

    def get_random_unlabeled(self):
        return _pygo.DatasetInterface_get_random_unlabeled(self)

    def get_training_size(self):
        return _pygo.DatasetInterface_get_training_size(self)

    def get_testing_size(self):
        return _pygo.DatasetInterface_get_testing_size(self)

    def get_unlabeled_size(self):
        return _pygo.DatasetInterface_get_unlabeled_size(self)

    def get_input_size(self):
        return _pygo.DatasetInterface_get_input_size(self)

    def get_output_size(self):
        return _pygo.DatasetInterface_get_output_size(self)

    def get_width(self):
        return _pygo.DatasetInterface_get_width(self)

    def get_height(self):
        return _pygo.DatasetInterface_get_height(self)

    def get_channels(self):
        return _pygo.DatasetInterface_get_channels(self)

    def print_testing_item(self, idx):
        return _pygo.DatasetInterface_print_testing_item(self, idx)

    def export_h_testing(self, file_name, count):
        return _pygo.DatasetInterface_export_h_testing(self, file_name, count)

    def save_to_json(self, file_name):
        return _pygo.DatasetInterface_save_to_json(self, file_name)

    def save_to_txt_training(self, file_name):
        return _pygo.DatasetInterface_save_to_txt_training(self, file_name)

    def save_to_txt_testing(self, file_name):
        return _pygo.DatasetInterface_save_to_txt_testing(self, file_name)

    def save_to_binary(self, training_file_name, testing_file_name, unlabeled_file_name):
        return _pygo.DatasetInterface_save_to_binary(self, training_file_name, testing_file_name, unlabeled_file_name)

    def save_images(self, training_file_name_prefix, testing_file_name_prefix):
        return _pygo.DatasetInterface_save_images(self, training_file_name_prefix, testing_file_name_prefix)
DatasetInterface_swigregister = _pygo.DatasetInterface_swigregister
DatasetInterface_swigregister(DatasetInterface)

class DatasetBinary(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetBinary, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetBinary, name)
    __repr__ = _swig_repr

    def __init__(self, training_file_name, testing_file_name):
        this = _pygo.new_DatasetBinary(training_file_name, testing_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DatasetBinary
    __del__ = lambda self: None
DatasetBinary_swigregister = _pygo.DatasetBinary_swigregister
DatasetBinary_swigregister(DatasetBinary)

class DatasetImages(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetImages, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetImages, name)
    __repr__ = _swig_repr

    def __init__(self, json_config_file_name):
        this = _pygo.new_DatasetImages(json_config_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DatasetImages
    __del__ = lambda self: None
DatasetImages_swigregister = _pygo.DatasetImages_swigregister
DatasetImages_swigregister(DatasetImages)

class DatasetMnist(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetMnist, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetMnist, name)
    __repr__ = _swig_repr

    def __init__(self, training_data_file_name, training_labels_file_name, testing_data_file_name, testing_labels_file_name, make_1d=False):
        this = _pygo.new_DatasetMnist(training_data_file_name, training_labels_file_name, testing_data_file_name, testing_labels_file_name, make_1d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DatasetMnist
    __del__ = lambda self: None
DatasetMnist_swigregister = _pygo.DatasetMnist_swigregister
DatasetMnist_swigregister(DatasetMnist)

class DatasetPair(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetPair, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetPair, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, training_size_=-1, testing_size_=-1):
        this = _pygo.new_DatasetPair(dataset, training_size_, testing_size_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DatasetPair
    __del__ = lambda self: None
DatasetPair_swigregister = _pygo.DatasetPair_swigregister
DatasetPair_swigregister(DatasetPair)

class DatasetPreprocessing(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetPreprocessing, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetPreprocessing, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_file_name):
        this = _pygo.new_DatasetPreprocessing(dataset, config_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DatasetPreprocessing
    __del__ = lambda self: None
DatasetPreprocessing_swigregister = _pygo.DatasetPreprocessing_swigregister
DatasetPreprocessing_swigregister(DatasetPreprocessing)

class DatasetTicTacToe(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetTicTacToe, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetTicTacToe, name)
    __repr__ = _swig_repr

    def __init__(self, data_file_name, testing_ratio=0.5, padding=0):
        this = _pygo.new_DatasetTicTacToe(data_file_name, testing_ratio, padding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DatasetTicTacToe
    __del__ = lambda self: None
DatasetTicTacToe_swigregister = _pygo.DatasetTicTacToe_swigregister
DatasetTicTacToe_swigregister(DatasetTicTacToe)

class CNN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_CNN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_CNN
    __del__ = lambda self: None

    def forward(self, *args):
        return _pygo.CNN_forward(self, *args)

    def train(self, *args):
        return _pygo.CNN_train(self, *args)

    def train_from_error(self, error):
        return _pygo.CNN_train_from_error(self, error)

    def set_training_mode(self):
        return _pygo.CNN_set_training_mode(self)

    def unset_training_mode(self):
        return _pygo.CNN_unset_training_mode(self)

    def reset_state(self):
        return _pygo.CNN_reset_state(self)

    def set_learning_rate(self, learning_rate):
        return _pygo.CNN_set_learning_rate(self, learning_rate)

    def set_lambda1(self, arg2):
        return _pygo.CNN_set_lambda1(self, arg2)

    def set_lambda2(self, arg2):
        return _pygo.CNN_set_lambda2(self, arg2)

    def get_learning_rate(self):
        return _pygo.CNN_get_learning_rate(self)

    def get_lambda1(self):
        return _pygo.CNN_get_lambda1(self)

    def get_lambda2(self):
        return _pygo.CNN_get_lambda2(self)

    def save(self, file_name_prefix):
        return _pygo.CNN_save(self, file_name_prefix)

    def load_weights(self, file_name_prefix):
        return _pygo.CNN_load_weights(self, file_name_prefix)

    def get_error_back(self):
        return _pygo.CNN_get_error_back(self)
CNN_swigregister = _pygo.CNN_swigregister
CNN_swigregister(CNN)

class sHistogramItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sHistogramItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sHistogramItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _pygo.sHistogramItem_count_set
    __swig_getmethods__["count"] = _pygo.sHistogramItem_count_get
    if _newclass:
        count = _swig_property(_pygo.sHistogramItem_count_get, _pygo.sHistogramItem_count_set)
    __swig_setmethods__["normalised_count"] = _pygo.sHistogramItem_normalised_count_set
    __swig_getmethods__["normalised_count"] = _pygo.sHistogramItem_normalised_count_get
    if _newclass:
        normalised_count = _swig_property(_pygo.sHistogramItem_normalised_count_get, _pygo.sHistogramItem_normalised_count_set)
    __swig_setmethods__["value"] = _pygo.sHistogramItem_value_set
    __swig_getmethods__["value"] = _pygo.sHistogramItem_value_get
    if _newclass:
        value = _swig_property(_pygo.sHistogramItem_value_get, _pygo.sHistogramItem_value_set)

    def __init__(self):
        this = _pygo.new_sHistogramItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_sHistogramItem
    __del__ = lambda self: None
sHistogramItem_swigregister = _pygo.sHistogramItem_swigregister
sHistogramItem_swigregister(sHistogramItem)

class Histogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygo.new_Histogram()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_Histogram
    __del__ = lambda self: None

    def add(self, value):
        return _pygo.Histogram_add(self, value)

    def clear(self):
        return _pygo.Histogram_clear(self)

    def compute(self, count=201):
        return _pygo.Histogram_compute(self, count)

    def get_count(self):
        return _pygo.Histogram_get_count(self)

    def get(self, *args):
        return _pygo.Histogram_get(self, *args)

    def asString(self):
        return _pygo.Histogram_asString(self)

    def _print(self):
        return _pygo.Histogram__print(self)

    def save(self, file_name):
        return _pygo.Histogram_save(self, file_name)

    def get_max(self):
        return _pygo.Histogram_get_max(self)

    def get_min(self):
        return _pygo.Histogram_get_min(self)

    def get_average(self):
        return _pygo.Histogram_get_average(self)

    def get_std(self):
        return _pygo.Histogram_get_std(self)
Histogram_swigregister = _pygo.Histogram_swigregister
Histogram_swigregister(Histogram)

class ClassificationCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassificationCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificationCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_ClassificationCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_ClassificationCompare
    __del__ = lambda self: None

    def compare(self, required_value, output_value):
        return _pygo.ClassificationCompare_compare(self, required_value, output_value)

    def set_classes_count(self, classes_count):
        return _pygo.ClassificationCompare_set_classes_count(self, classes_count)

    def set_top_n_count(self, top_n_count_):
        return _pygo.ClassificationCompare_set_top_n_count(self, top_n_count_)

    def clear(self):
        return _pygo.ClassificationCompare_clear(self)

    def process(self, percent_result):
        return _pygo.ClassificationCompare_process(self, percent_result)

    def get_success(self):
        return _pygo.ClassificationCompare_get_success(self)

    def get_summary_result(self):
        return _pygo.ClassificationCompare_get_summary_result(self)

    def get_text_result(self):
        return _pygo.ClassificationCompare_get_text_result(self)

    def get_json_result(self):
        return _pygo.ClassificationCompare_get_json_result(self)

    def save_text_file(self, file_name):
        return _pygo.ClassificationCompare_save_text_file(self, file_name)

    def save_json_file(self, file_name):
        return _pygo.ClassificationCompare_save_json_file(self, file_name)

    def get_confusion_matrix(self):
        return _pygo.ClassificationCompare_get_confusion_matrix(self)

    def get_class_success_rate(self):
        return _pygo.ClassificationCompare_get_class_success_rate(self)

    def get_classes_count(self):
        return _pygo.ClassificationCompare_get_classes_count(self)
ClassificationCompare_swigregister = _pygo.ClassificationCompare_swigregister
ClassificationCompare_swigregister(ClassificationCompare)

class RegressionCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegressionCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegressionCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_RegressionCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_RegressionCompare
    __del__ = lambda self: None

    def set_output_size(self, output_size):
        return _pygo.RegressionCompare_set_output_size(self, output_size)

    def compare(self, required_value, output_value):
        return _pygo.RegressionCompare_compare(self, required_value, output_value)

    def process(self, fixed_bars_count=-1):
        return _pygo.RegressionCompare_process(self, fixed_bars_count)

    def get_error_average(self):
        return _pygo.RegressionCompare_get_error_average(self)

    def get_error_std(self):
        return _pygo.RegressionCompare_get_error_std(self)

    def get_error_average_euclidean(self):
        return _pygo.RegressionCompare_get_error_average_euclidean(self)

    def get_error_std_euclidean(self):
        return _pygo.RegressionCompare_get_error_std_euclidean(self)

    def save_text_file(self, log_file_name_prefix):
        return _pygo.RegressionCompare_save_text_file(self, log_file_name_prefix)

    def save_json_file(self, json_file_name):
        return _pygo.RegressionCompare_save_json_file(self, json_file_name)

    def process_json_result(self):
        return _pygo.RegressionCompare_process_json_result(self)
RegressionCompare_swigregister = _pygo.RegressionCompare_swigregister
RegressionCompare_swigregister(RegressionCompare)

class ClassificationExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassificationExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificationExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _pygo.new_ClassificationExperiment(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_ClassificationExperiment
    __del__ = lambda self: None

    def run(self):
        return _pygo.ClassificationExperiment_run(self)
ClassificationExperiment_swigregister = _pygo.ClassificationExperiment_swigregister
ClassificationExperiment_swigregister(ClassificationExperiment)

class RegressionExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegressionExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegressionExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _pygo.new_RegressionExperiment(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_RegressionExperiment
    __del__ = lambda self: None

    def run(self):
        return _pygo.RegressionExperiment_run(self)
RegressionExperiment_swigregister = _pygo.RegressionExperiment_swigregister
RegressionExperiment_swigregister(RegressionExperiment)

class AutoencoderExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoencoderExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoencoderExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _pygo.new_AutoencoderExperiment(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_AutoencoderExperiment
    __del__ = lambda self: None

    def run(self):
        return _pygo.AutoencoderExperiment_run(self)
AutoencoderExperiment_swigregister = _pygo.AutoencoderExperiment_swigregister
AutoencoderExperiment_swigregister(AutoencoderExperiment)

class DQN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_DQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DQN
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size, normalise):
        return _pygo.DQN_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size, normalise)

    def compute_q_values(self, state):
        return _pygo.DQN_compute_q_values(self, state)

    def learn(self):
        return _pygo.DQN_learn(self)

    def test(self):
        return _pygo.DQN_test(self)

    def new_batch(self):
        return _pygo.DQN_new_batch(self)

    def is_full(self):
        return _pygo.DQN_is_full(self)
DQN_swigregister = _pygo.DQN_swigregister
DQN_swigregister(DQN)

class DDQN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DDQN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DDQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_DDQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DDQN
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size, normalise):
        return _pygo.DDQN_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size, normalise)

    def compute_q_values(self, state):
        return _pygo.DDQN_compute_q_values(self, state)

    def learn(self):
        return _pygo.DDQN_learn(self)

    def test(self):
        return _pygo.DDQN_test(self)

    def new_batch(self):
        return _pygo.DDQN_new_batch(self)

    def is_full(self):
        return _pygo.DDQN_is_full(self)
DDQN_swigregister = _pygo.DDQN_swigregister
DDQN_swigregister(DDQN)

class DQNCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQNCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_DQNCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DQNCompare
    __del__ = lambda self: None

    def clear(self):
        return _pygo.DQNCompare_clear(self)

    def set_output_size(self, output_size):
        return _pygo.DQNCompare_set_output_size(self, output_size)

    def compare(self, target_value, output_value, action):
        return _pygo.DQNCompare_compare(self, target_value, output_value, action)

    def process(self, fixed_bars_count=-1):
        return _pygo.DQNCompare_process(self, fixed_bars_count)

    def get_error_average_squared(self):
        return _pygo.DQNCompare_get_error_average_squared(self)

    def get_error_min_squared(self):
        return _pygo.DQNCompare_get_error_min_squared(self)

    def get_error_max_squared(self):
        return _pygo.DQNCompare_get_error_max_squared(self)

    def save_text_file(self, log_file_name_prefix):
        return _pygo.DQNCompare_save_text_file(self, log_file_name_prefix)

    def save_json_file(self, json_file_name):
        return _pygo.DQNCompare_save_json_file(self, json_file_name)

    def process_json_result(self):
        return _pygo.DQNCompare_process_json_result(self)
DQNCompare_swigregister = _pygo.DQNCompare_swigregister
DQNCompare_swigregister(DQNCompare)

class DQNP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQNP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_DQNP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_DQNP
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size, normalise):
        return _pygo.DQNP_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size, normalise)

    def compute_q_values(self, state):
        return _pygo.DQNP_compute_q_values(self, state)

    def learn(self):
        return _pygo.DQNP_learn(self)

    def test(self):
        return _pygo.DQNP_test(self)

    def new_batch(self):
        return _pygo.DQNP_new_batch(self)

    def is_full(self):
        return _pygo.DQNP_is_full(self)
DQNP_swigregister = _pygo.DQNP_swigregister
DQNP_swigregister(DQNP)

class RandomDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_RandomDistribution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_RandomDistribution
    __del__ = lambda self: None

    def set(self, p_, count=-1):
        return _pygo.RandomDistribution_set(self, p_, count)

    def get(self):
        return _pygo.RandomDistribution_get(self)
RandomDistribution_swigregister = _pygo.RandomDistribution_swigregister
RandomDistribution_swigregister(RandomDistribution)

class sGoPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sGoPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sGoPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pygo.sGoPoint_x_set
    __swig_getmethods__["x"] = _pygo.sGoPoint_x_get
    if _newclass:
        x = _swig_property(_pygo.sGoPoint_x_get, _pygo.sGoPoint_x_set)
    __swig_setmethods__["y"] = _pygo.sGoPoint_y_set
    __swig_getmethods__["y"] = _pygo.sGoPoint_y_get
    if _newclass:
        y = _swig_property(_pygo.sGoPoint_y_get, _pygo.sGoPoint_y_set)

    def __init__(self):
        this = _pygo.new_sGoPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_sGoPoint
    __del__ = lambda self: None
sGoPoint_swigregister = _pygo.sGoPoint_swigregister
sGoPoint_swigregister(sGoPoint)

GoDatasetMode_MovePrediction = _pygo.GoDatasetMode_MovePrediction
GoDatasetMode_WinnerPrediction = _pygo.GoDatasetMode_WinnerPrediction
class GoRLConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoRLConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoRLConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_GoRLConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoRLConfig
    __del__ = lambda self: None

    def load(self, config_file_name):
        return _pygo.GoRLConfig_load(self, config_file_name)

    def verbose(self):
        return _pygo.GoRLConfig_verbose(self)

    def visualisation(self):
        return _pygo.GoRLConfig_visualisation(self)

    def trials_count(self):
        return _pygo.GoRLConfig_trials_count(self)

    def games_count(self):
        return _pygo.GoRLConfig_games_count(self)

    def board_size(self):
        return _pygo.GoRLConfig_board_size(self)

    def komi(self):
        return _pygo.GoRLConfig_komi(self)

    def result_dir(self):
        return _pygo.GoRLConfig_result_dir(self)

    def padding(self):
        return _pygo.GoRLConfig_padding(self)

    def top_moves_count(self):
        return _pygo.GoRLConfig_top_moves_count(self)

    def moves_decay(self):
        return _pygo.GoRLConfig_moves_decay(self)

    def experience_buffer_size(self):
        return _pygo.GoRLConfig_experience_buffer_size(self)

    def gamma(self):
        return _pygo.GoRLConfig_gamma(self)

    def network_config_file_name(self):
        return _pygo.GoRLConfig_network_config_file_name(self)
GoRLConfig_swigregister = _pygo.GoRLConfig_swigregister
GoRLConfig_swigregister(GoRLConfig)

class GoMove(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoMove, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoMove, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_GoMove(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoMove
    __del__ = lambda self: None

    def pass_move(self, player):
        return _pygo.GoMove_pass_move(self, player)

    def black_move(self, x, y):
        return _pygo.GoMove_black_move(self, x, y)

    def white_move(self, x, y):
        return _pygo.GoMove_white_move(self, x, y)

    def player(self):
        return _pygo.GoMove_player(self)

    def _pass(self):
        return _pygo.GoMove__pass(self)

    def x(self):
        return _pygo.GoMove_x(self)

    def y(self):
        return _pygo.GoMove_y(self)

    def __eq__(self, rhs):
        return _pygo.GoMove___eq__(self, rhs)

    def __ne__(self, rhs):
        return _pygo.GoMove___ne__(self, rhs)

    def move_to_idx(self, board_size):
        return _pygo.GoMove_move_to_idx(self, board_size)

    def _print(self):
        return _pygo.GoMove__print(self)

    def asString(self):
        return _pygo.GoMove_asString(self)
GoMove_swigregister = _pygo.GoMove_swigregister
GoMove_swigregister(GoMove)

class Goban(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Goban, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Goban, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_Goban(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_Goban
    __del__ = lambda self: None

    def clear(self):
        return _pygo.Goban_clear(self)

    def get_size(self):
        return _pygo.Goban_get_size(self)

    def get_komi(self):
        return _pygo.Goban_get_komi(self)

    def get_active_player(self):
        return _pygo.Goban_get_active_player(self)

    def get_score(self):
        return _pygo.Goban_get_score(self)

    def get_board(self):
        return _pygo.Goban_get_board(self)

    def get_moves_count(self):
        return _pygo.Goban_get_moves_count(self)

    def get_result(self):
        return _pygo.Goban_get_result(self)

    def is_legal_move(self, move):
        return _pygo.Goban_is_legal_move(self, move)

    def get_legal_moves_count(self):
        return _pygo.Goban_get_legal_moves_count(self)

    def get_legal_moves(self):
        return _pygo.Goban_get_legal_moves(self)

    def play_move_no_check(self, move):
        return _pygo.Goban_play_move_no_check(self, move)

    def play_move(self, move):
        return _pygo.Goban_play_move(self, move)

    def load(self, json_file_name):
        return _pygo.Goban_load(self, json_file_name)

    def save(self, json_file_name):
        return _pygo.Goban_save(self, json_file_name)

    def asString(self):
        return _pygo.Goban_asString(self)

    def _print(self):
        return _pygo.Goban__print(self)

    def render(self, delay_time=300, verbose=False):
        return _pygo.Goban_render(self, delay_time, verbose)

    def compute_score(self):
        return _pygo.Goban_compute_score(self)
Goban_swigregister = _pygo.Goban_swigregister
Goban_swigregister(Goban)

class GoNNInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoNNInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoNNInput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygo.new_GoNNInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoNNInput
    __del__ = lambda self: None

    def create(self, board, current_player, padding=0):
        return _pygo.GoNNInput_create(self, board, current_player, padding)
GoNNInput_swigregister = _pygo.GoNNInput_swigregister
GoNNInput_swigregister(GoNNInput)

class GoBoardState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoBoardState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoBoardState, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_GoBoardState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoBoardState
    __del__ = lambda self: None

    def set(self, *args):
        return _pygo.GoBoardState_set(self, *args)

    def get(self, padding, rotation, noise_level=0.0):
        return _pygo.GoBoardState_get(self, padding, rotation, noise_level)

    def get_winner_value(self, padding, rotation, noise_level=0.0):
        return _pygo.GoBoardState_get_winner_value(self, padding, rotation, noise_level)

    def get_rotations_count(self):
        return _pygo.GoBoardState_get_rotations_count(self)

    def ToString(self):
        return _pygo.GoBoardState_ToString(self)

    def _print(self):
        return _pygo.GoBoardState__print(self)
GoBoardState_swigregister = _pygo.GoBoardState_swigregister
GoBoardState_swigregister(GoBoardState)

class GoDatasetRuntime(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoDatasetRuntime, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GoDatasetRuntime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_GoDatasetRuntime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoDatasetRuntime
    __del__ = lambda self: None

    def create(self):
        return _pygo.GoDatasetRuntime_create(self)

    def get_training_size(self):
        return _pygo.GoDatasetRuntime_get_training_size(self)

    def get_testing_size(self):
        return _pygo.GoDatasetRuntime_get_testing_size(self)

    def get_output_size(self):
        return _pygo.GoDatasetRuntime_get_output_size(self)

    def get_random_training(self):
        return _pygo.GoDatasetRuntime_get_random_training(self)

    def get_testing(self, idx):
        return _pygo.GoDatasetRuntime_get_testing(self, idx)

    def get_random_testing(self):
        return _pygo.GoDatasetRuntime_get_random_testing(self)
GoDatasetRuntime_swigregister = _pygo.GoDatasetRuntime_swigregister
GoDatasetRuntime_swigregister(GoDatasetRuntime)

class GoDatasetValueRuntime(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoDatasetValueRuntime, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GoDatasetValueRuntime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygo.new_GoDatasetValueRuntime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoDatasetValueRuntime
    __del__ = lambda self: None

    def create(self):
        return _pygo.GoDatasetValueRuntime_create(self)

    def get_training_size(self):
        return _pygo.GoDatasetValueRuntime_get_training_size(self)

    def get_testing_size(self):
        return _pygo.GoDatasetValueRuntime_get_testing_size(self)

    def get_output_size(self):
        return _pygo.GoDatasetValueRuntime_get_output_size(self)

    def get_random_training(self):
        return _pygo.GoDatasetValueRuntime_get_random_training(self)

    def get_testing(self, idx):
        return _pygo.GoDatasetValueRuntime_get_testing(self, idx)

    def get_random_testing(self):
        return _pygo.GoDatasetValueRuntime_get_random_testing(self)
GoDatasetValueRuntime_swigregister = _pygo.GoDatasetValueRuntime_swigregister
GoDatasetValueRuntime_swigregister(GoDatasetValueRuntime)

class GoPlayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoPlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoPlayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygo.new_GoPlayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoPlayer
    __del__ = lambda self: None

    def play(self, goban):
        return _pygo.GoPlayer_play(self, goban)

    def get_move(self):
        return _pygo.GoPlayer_get_move(self)

    def new_game(self):
        return _pygo.GoPlayer_new_game(self)

    def set_result(self, winner):
        return _pygo.GoPlayer_set_result(self, winner)
GoPlayer_swigregister = _pygo.GoPlayer_swigregister
GoPlayer_swigregister(GoPlayer)

class GoHumanPlayer(GoPlayer):
    __swig_setmethods__ = {}
    for _s in [GoPlayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoHumanPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [GoPlayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GoHumanPlayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygo.new_GoHumanPlayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoHumanPlayer
    __del__ = lambda self: None
GoHumanPlayer_swigregister = _pygo.GoHumanPlayer_swigregister
GoHumanPlayer_swigregister(GoHumanPlayer)

class GoSgfPlayer(GoPlayer):
    __swig_setmethods__ = {}
    for _s in [GoPlayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoSgfPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [GoPlayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GoSgfPlayer, name)
    __repr__ = _swig_repr

    def __init__(self, sgf_file_name):
        this = _pygo.new_GoSgfPlayer(sgf_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoSgfPlayer
    __del__ = lambda self: None

    def get_winner(self):
        return _pygo.GoSgfPlayer_get_winner(self)

    def get_moves_count(self):
        return _pygo.GoSgfPlayer_get_moves_count(self)

    def get_move(self, idx):
        return _pygo.GoSgfPlayer_get_move(self, idx)
GoSgfPlayer_swigregister = _pygo.GoSgfPlayer_swigregister
GoSgfPlayer_swigregister(GoSgfPlayer)

class GoNNPlayer(GoPlayer):
    __swig_setmethods__ = {}
    for _s in [GoPlayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoNNPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [GoPlayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GoNNPlayer, name)
    __repr__ = _swig_repr

    def __init__(self, config_file_name, board_size):
        this = _pygo.new_GoNNPlayer(config_file_name, board_size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoNNPlayer
    __del__ = lambda self: None

    def new_game(self):
        return _pygo.GoNNPlayer_new_game(self)
GoNNPlayer_swigregister = _pygo.GoNNPlayer_swigregister
GoNNPlayer_swigregister(GoNNPlayer)

class GoRLPlayer(GoPlayer):
    __swig_setmethods__ = {}
    for _s in [GoPlayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoRLPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [GoPlayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GoRLPlayer, name)
    __repr__ = _swig_repr

    def __init__(self, config_file_name, board_size):
        this = _pygo.new_GoRLPlayer(config_file_name, board_size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoRLPlayer
    __del__ = lambda self: None

    def set_result(self, winner):
        return _pygo.GoRLPlayer_set_result(self, winner)

    def learn(self):
        return _pygo.GoRLPlayer_learn(self)

    def test(self):
        return _pygo.GoRLPlayer_test(self)

    def get_compare_result(self):
        return _pygo.GoRLPlayer_get_compare_result(self)

    def new_batch(self):
        return _pygo.GoRLPlayer_new_batch(self)

    def _print(self):
        return _pygo.GoRLPlayer__print(self)
GoRLPlayer_swigregister = _pygo.GoRLPlayer_swigregister
GoRLPlayer_swigregister(GoRLPlayer)

class sGoSupervisedResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sGoSupervisedResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sGoSupervisedResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["board_size"] = _pygo.sGoSupervisedResult_board_size_set
    __swig_getmethods__["board_size"] = _pygo.sGoSupervisedResult_board_size_get
    if _newclass:
        board_size = _swig_property(_pygo.sGoSupervisedResult_board_size_get, _pygo.sGoSupervisedResult_board_size_set)
    __swig_setmethods__["moves_success_rate"] = _pygo.sGoSupervisedResult_moves_success_rate_set
    __swig_getmethods__["moves_success_rate"] = _pygo.sGoSupervisedResult_moves_success_rate_get
    if _newclass:
        moves_success_rate = _swig_property(_pygo.sGoSupervisedResult_moves_success_rate_get, _pygo.sGoSupervisedResult_moves_success_rate_set)
    __swig_setmethods__["moves_count"] = _pygo.sGoSupervisedResult_moves_count_set
    __swig_getmethods__["moves_count"] = _pygo.sGoSupervisedResult_moves_count_get
    if _newclass:
        moves_count = _swig_property(_pygo.sGoSupervisedResult_moves_count_get, _pygo.sGoSupervisedResult_moves_count_set)
    __swig_setmethods__["pass_success_rate"] = _pygo.sGoSupervisedResult_pass_success_rate_set
    __swig_getmethods__["pass_success_rate"] = _pygo.sGoSupervisedResult_pass_success_rate_get
    if _newclass:
        pass_success_rate = _swig_property(_pygo.sGoSupervisedResult_pass_success_rate_get, _pygo.sGoSupervisedResult_pass_success_rate_set)
    __swig_setmethods__["pass_count"] = _pygo.sGoSupervisedResult_pass_count_set
    __swig_getmethods__["pass_count"] = _pygo.sGoSupervisedResult_pass_count_get
    if _newclass:
        pass_count = _swig_property(_pygo.sGoSupervisedResult_pass_count_get, _pygo.sGoSupervisedResult_pass_count_set)
    __swig_setmethods__["average_success_rate"] = _pygo.sGoSupervisedResult_average_success_rate_set
    __swig_getmethods__["average_success_rate"] = _pygo.sGoSupervisedResult_average_success_rate_get
    if _newclass:
        average_success_rate = _swig_property(_pygo.sGoSupervisedResult_average_success_rate_get, _pygo.sGoSupervisedResult_average_success_rate_set)

    def __init__(self):
        this = _pygo.new_sGoSupervisedResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_sGoSupervisedResult
    __del__ = lambda self: None
sGoSupervisedResult_swigregister = _pygo.sGoSupervisedResult_swigregister
sGoSupervisedResult_swigregister(sGoSupervisedResult)

class GoSupervised(ClassificationExperiment):
    __swig_setmethods__ = {}
    for _s in [ClassificationExperiment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoSupervised, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassificationExperiment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GoSupervised, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _pygo.new_GoSupervised(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoSupervised
    __del__ = lambda self: None
GoSupervised_swigregister = _pygo.GoSupervised_swigregister
GoSupervised_swigregister(GoSupervised)

class sGoPlayerResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sGoPlayerResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sGoPlayerResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wins"] = _pygo.sGoPlayerResult_wins_set
    __swig_getmethods__["wins"] = _pygo.sGoPlayerResult_wins_get
    if _newclass:
        wins = _swig_property(_pygo.sGoPlayerResult_wins_get, _pygo.sGoPlayerResult_wins_set)
    __swig_setmethods__["wins_black"] = _pygo.sGoPlayerResult_wins_black_set
    __swig_getmethods__["wins_black"] = _pygo.sGoPlayerResult_wins_black_get
    if _newclass:
        wins_black = _swig_property(_pygo.sGoPlayerResult_wins_black_get, _pygo.sGoPlayerResult_wins_black_set)
    __swig_setmethods__["wins_white"] = _pygo.sGoPlayerResult_wins_white_set
    __swig_getmethods__["wins_white"] = _pygo.sGoPlayerResult_wins_white_get
    if _newclass:
        wins_white = _swig_property(_pygo.sGoPlayerResult_wins_white_get, _pygo.sGoPlayerResult_wins_white_set)
    __swig_setmethods__["lose"] = _pygo.sGoPlayerResult_lose_set
    __swig_getmethods__["lose"] = _pygo.sGoPlayerResult_lose_get
    if _newclass:
        lose = _swig_property(_pygo.sGoPlayerResult_lose_get, _pygo.sGoPlayerResult_lose_set)
    __swig_setmethods__["lose_black"] = _pygo.sGoPlayerResult_lose_black_set
    __swig_getmethods__["lose_black"] = _pygo.sGoPlayerResult_lose_black_get
    if _newclass:
        lose_black = _swig_property(_pygo.sGoPlayerResult_lose_black_get, _pygo.sGoPlayerResult_lose_black_set)
    __swig_setmethods__["lose_white"] = _pygo.sGoPlayerResult_lose_white_set
    __swig_getmethods__["lose_white"] = _pygo.sGoPlayerResult_lose_white_get
    if _newclass:
        lose_white = _swig_property(_pygo.sGoPlayerResult_lose_white_get, _pygo.sGoPlayerResult_lose_white_set)
    __swig_setmethods__["win_ratio"] = _pygo.sGoPlayerResult_win_ratio_set
    __swig_getmethods__["win_ratio"] = _pygo.sGoPlayerResult_win_ratio_get
    if _newclass:
        win_ratio = _swig_property(_pygo.sGoPlayerResult_win_ratio_get, _pygo.sGoPlayerResult_win_ratio_set)

    def __init__(self):
        this = _pygo.new_sGoPlayerResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_sGoPlayerResult
    __del__ = lambda self: None
sGoPlayerResult_swigregister = _pygo.sGoPlayerResult_swigregister
sGoPlayerResult_swigregister(sGoPlayerResult)

class sGoTrialResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sGoTrialResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sGoTrialResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["player_a"] = _pygo.sGoTrialResult_player_a_set
    __swig_getmethods__["player_a"] = _pygo.sGoTrialResult_player_a_get
    if _newclass:
        player_a = _swig_property(_pygo.sGoTrialResult_player_a_get, _pygo.sGoTrialResult_player_a_set)
    __swig_setmethods__["player_b"] = _pygo.sGoTrialResult_player_b_set
    __swig_getmethods__["player_b"] = _pygo.sGoTrialResult_player_b_get
    if _newclass:
        player_b = _swig_property(_pygo.sGoTrialResult_player_b_get, _pygo.sGoTrialResult_player_b_set)
    __swig_setmethods__["winner"] = _pygo.sGoTrialResult_winner_set
    __swig_getmethods__["winner"] = _pygo.sGoTrialResult_winner_get
    if _newclass:
        winner = _swig_property(_pygo.sGoTrialResult_winner_get, _pygo.sGoTrialResult_winner_set)

    def __init__(self):
        this = _pygo.new_sGoTrialResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_sGoTrialResult
    __del__ = lambda self: None
sGoTrialResult_swigregister = _pygo.sGoTrialResult_swigregister
sGoTrialResult_swigregister(sGoTrialResult)

class GoTrial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoTrial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoTrial, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygo.new_GoTrial()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygo.delete_GoTrial
    __del__ = lambda self: None

    def process(self, player_a, player_b, count, board_size, komi, visualisation=False):
        return _pygo.GoTrial_process(self, player_a, player_b, count, board_size, komi, visualisation)

    def get(self):
        return _pygo.GoTrial_get(self)

    def asString(self, verbose=False):
        return _pygo.GoTrial_asString(self, verbose)

    def _print(self):
        return _pygo.GoTrial__print(self)
GoTrial_swigregister = _pygo.GoTrial_swigregister
GoTrial_swigregister(GoTrial)

# This file is compatible with both classic and new-style classes.


