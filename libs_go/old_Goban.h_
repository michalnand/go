#ifndef _GOBAN_H_
#define _GOBAN_H_

#include "GoPlayer.h"
#include "go_defs.h"

class Goban
{
 protected:
	unsigned int size;
	bool draw_enabled;
  float komi;

	GoBoard 	board, board_tmp;
	std::vector<std::vector<bool>> 	legal;
	std::vector<std::vector<bool>> 	freedoms;
  std::vector<std::vector<int>> 	territory;

	std::vector<GoMove> legal_moves;

  unsigned int moves_count;

  public:
    GoMove prev_move;
    std::vector<GoMove> moves;
    std::vector<GoBoard> positions;

 public:

 	Goban(unsigned int size = 19, bool draw_enabled = true, float komi = 6.5);
  virtual ~Goban();

	int play(GoPlayer &black, GoPlayer &white);

	virtual void draw();

  float compute_score();

 protected:

	void find_legal_moves(int player);
	void play_move(GoMove &move);
	bool is_legal_move(GoMove &move);
	int count_neighbour_fields(int x, int y, int player);
	int count_freedom_fields(int x, int y, int player);

	void compute_freedoms();
	int count_captured(int player);
	void capture_stones(int player);

private:
  int find_max_territory_value(int x, int y);
  int find_min_territory_value(int x, int y);

  bool compare_board(GoBoard &board_a, GoBoard &board_b);
  bool near_move(int prev_x, int prev_y, int x, int y);
};


#endif
